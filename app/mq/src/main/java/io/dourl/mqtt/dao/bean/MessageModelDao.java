package io.dourl.mqtt.dao.bean;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.being.fame.dao.bean.MessageModel.BodyConverter;
import com.being.fame.dao.bean.MessageModel.ClanConverter;
import com.being.fame.dao.bean.MessageModel.MessageTypeConverter;
import com.being.fame.dao.bean.MessageModel.Status;
import com.being.fame.dao.bean.MessageModel.StatusConverter;
import com.being.fame.model.ClanModel;
import com.being.fame.model.message.chat.BaseMsgBody;
import com.being.fame.model.message.chat.MessageType;

import io.dourl.mqtt.model.ClanModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE_MODEL".
*/
public class MessageModelDao extends AbstractDao<MessageModel, Long> {

    public static final String TABLENAME = "MESSAGE_MODEL";

    /**
     * Properties of entity MessageModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Msgid = new Property(1, String.class, "msgid", false, "MSGID");
        public final static Property Type = new Property(2, Integer.class, "type", false, "TYPE");
        public final static Property FromUid = new Property(3, String.class, "fromUid", false, "FROM_UID");
        public final static Property ToUid = new Property(4, String.class, "toUid", false, "TO_UID");
        public final static Property Clan = new Property(5, String.class, "clan", false, "CLAN");
        public final static Property Time = new Property(6, long.class, "time", false, "TIME");
        public final static Property LocalTime = new Property(7, long.class, "localTime", false, "LOCAL_TIME");
        public final static Property IsRead = new Property(8, boolean.class, "isRead", false, "IS_READ");
        public final static Property SessionId = new Property(9, String.class, "sessionId", false, "SESSION_ID");
        public final static Property IsMine = new Property(10, boolean.class, "isMine", false, "IS_MINE");
        public final static Property SendStatus = new Property(11, String.class, "sendStatus", false, "SEND_STATUS");
        public final static Property Downloading = new Property(12, boolean.class, "downloading", false, "DOWNLOADING");
        public final static Property Body = new Property(13, String.class, "body", false, "BODY");
    }

    private DaoSession daoSession;

    private final MessageTypeConverter typeConverter = new MessageTypeConverter();
    private final ClanConverter clanConverter = new ClanConverter();
    private final StatusConverter sendStatusConverter = new StatusConverter();
    private final BodyConverter bodyConverter = new BodyConverter();

    public MessageModelDao(DaoConfig config) {
        super(config);
    }
    
    public MessageModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MSGID\" TEXT UNIQUE ," + // 1: msgid
                "\"TYPE\" INTEGER," + // 2: type
                "\"FROM_UID\" TEXT NOT NULL ," + // 3: fromUid
                "\"TO_UID\" TEXT NOT NULL ," + // 4: toUid
                "\"CLAN\" TEXT," + // 5: clan
                "\"TIME\" INTEGER NOT NULL ," + // 6: time
                "\"LOCAL_TIME\" INTEGER NOT NULL ," + // 7: localTime
                "\"IS_READ\" INTEGER NOT NULL ," + // 8: isRead
                "\"SESSION_ID\" TEXT," + // 9: sessionId
                "\"IS_MINE\" INTEGER NOT NULL ," + // 10: isMine
                "\"SEND_STATUS\" TEXT," + // 11: sendStatus
                "\"DOWNLOADING\" INTEGER NOT NULL ," + // 12: downloading
                "\"BODY\" TEXT);"); // 13: body
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MessageModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String msgid = entity.getMsgid();
        if (msgid != null) {
            stmt.bindString(2, msgid);
        }
 
        MessageType type = entity.getType();
        if (type != null) {
            stmt.bindLong(3, typeConverter.convertToDatabaseValue(type));
        }
        stmt.bindString(4, entity.getFromUid());
        stmt.bindString(5, entity.getToUid());
 
        ClanModel clan = entity.getClan();
        if (clan != null) {
            stmt.bindString(6, clanConverter.convertToDatabaseValue(clan));
        }
        stmt.bindLong(7, entity.getTime());
        stmt.bindLong(8, entity.getLocalTime());
        stmt.bindLong(9, entity.getIsRead() ? 1L: 0L);
 
        String sessionId = entity.getSessionId();
        if (sessionId != null) {
            stmt.bindString(10, sessionId);
        }
        stmt.bindLong(11, entity.getIsMine() ? 1L: 0L);
 
        Status sendStatus = entity.getSendStatus();
        if (sendStatus != null) {
            stmt.bindString(12, sendStatusConverter.convertToDatabaseValue(sendStatus));
        }
        stmt.bindLong(13, entity.getDownloading() ? 1L: 0L);
 
        BaseMsgBody body = entity.getBody();
        if (body != null) {
            stmt.bindString(14, bodyConverter.convertToDatabaseValue(body));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MessageModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String msgid = entity.getMsgid();
        if (msgid != null) {
            stmt.bindString(2, msgid);
        }
 
        MessageType type = entity.getType();
        if (type != null) {
            stmt.bindLong(3, typeConverter.convertToDatabaseValue(type));
        }
        stmt.bindString(4, entity.getFromUid());
        stmt.bindString(5, entity.getToUid());
 
        ClanModel clan = entity.getClan();
        if (clan != null) {
            stmt.bindString(6, clanConverter.convertToDatabaseValue(clan));
        }
        stmt.bindLong(7, entity.getTime());
        stmt.bindLong(8, entity.getLocalTime());
        stmt.bindLong(9, entity.getIsRead() ? 1L: 0L);
 
        String sessionId = entity.getSessionId();
        if (sessionId != null) {
            stmt.bindString(10, sessionId);
        }
        stmt.bindLong(11, entity.getIsMine() ? 1L: 0L);
 
        Status sendStatus = entity.getSendStatus();
        if (sendStatus != null) {
            stmt.bindString(12, sendStatusConverter.convertToDatabaseValue(sendStatus));
        }
        stmt.bindLong(13, entity.getDownloading() ? 1L: 0L);
 
        BaseMsgBody body = entity.getBody();
        if (body != null) {
            stmt.bindString(14, bodyConverter.convertToDatabaseValue(body));
        }
    }

    @Override
    protected final void attachEntity(MessageModel entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MessageModel readEntity(Cursor cursor, int offset) {
        MessageModel entity = new MessageModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // msgid
            cursor.isNull(offset + 2) ? null : typeConverter.convertToEntityProperty(cursor.getInt(offset + 2)), // type
            cursor.getString(offset + 3), // fromUid
            cursor.getString(offset + 4), // toUid
            cursor.isNull(offset + 5) ? null : clanConverter.convertToEntityProperty(cursor.getString(offset + 5)), // clan
            cursor.getLong(offset + 6), // time
            cursor.getLong(offset + 7), // localTime
            cursor.getShort(offset + 8) != 0, // isRead
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // sessionId
            cursor.getShort(offset + 10) != 0, // isMine
            cursor.isNull(offset + 11) ? null : sendStatusConverter.convertToEntityProperty(cursor.getString(offset + 11)), // sendStatus
            cursor.getShort(offset + 12) != 0, // downloading
            cursor.isNull(offset + 13) ? null : bodyConverter.convertToEntityProperty(cursor.getString(offset + 13)) // body
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MessageModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMsgid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : typeConverter.convertToEntityProperty(cursor.getInt(offset + 2)));
        entity.setFromUid(cursor.getString(offset + 3));
        entity.setToUid(cursor.getString(offset + 4));
        entity.setClan(cursor.isNull(offset + 5) ? null : clanConverter.convertToEntityProperty(cursor.getString(offset + 5)));
        entity.setTime(cursor.getLong(offset + 6));
        entity.setLocalTime(cursor.getLong(offset + 7));
        entity.setIsRead(cursor.getShort(offset + 8) != 0);
        entity.setSessionId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIsMine(cursor.getShort(offset + 10) != 0);
        entity.setSendStatus(cursor.isNull(offset + 11) ? null : sendStatusConverter.convertToEntityProperty(cursor.getString(offset + 11)));
        entity.setDownloading(cursor.getShort(offset + 12) != 0);
        entity.setBody(cursor.isNull(offset + 13) ? null : bodyConverter.convertToEntityProperty(cursor.getString(offset + 13)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MessageModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MessageModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MessageModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUserModelDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getUserModelDao().getAllColumns());
            builder.append(" FROM MESSAGE_MODEL T");
            builder.append(" LEFT JOIN USER_MODEL T0 ON T.\"FROM_UID\"=T0.\"UID\"");
            builder.append(" LEFT JOIN USER_MODEL T1 ON T.\"TO_UID\"=T1.\"UID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected MessageModel loadCurrentDeep(Cursor cursor, boolean lock) {
        MessageModel entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        UserModel from = loadCurrentOther(daoSession.getUserModelDao(), cursor, offset);
         if(from != null) {
            entity.setFrom(from);
        }
        offset += daoSession.getUserModelDao().getAllColumns().length;

        UserModel to = loadCurrentOther(daoSession.getUserModelDao(), cursor, offset);
         if(to != null) {
            entity.setTo(to);
        }

        return entity;    
    }

    public MessageModel loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<MessageModel> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<MessageModel> list = new ArrayList<MessageModel>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<MessageModel> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<MessageModel> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
