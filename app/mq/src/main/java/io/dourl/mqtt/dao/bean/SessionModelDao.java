package io.dourl.mqtt.dao.bean;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.being.fame.dao.bean.MessageModel.MessageTypeConverter;
import com.being.fame.dao.bean.MessageModel.Status;
import com.being.fame.dao.bean.MessageModel.StatusConverter;
import com.being.fame.dao.bean.SessionModel.ClanConverter;
import com.being.fame.model.ClanModel;
import com.being.fame.model.message.chat.MessageType;

import io.dourl.mqtt.model.ClanModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SESSION_MODEL".
*/
public class SessionModelDao extends AbstractDao<SessionModel, Long> {

    public static final String TABLENAME = "SESSION_MODEL";

    /**
     * Properties of entity SessionModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SessionID = new Property(1, String.class, "sessionID", false, "SESSION_ID");
        public final static Property SessionName = new Property(2, String.class, "sessionName", false, "SESSION_NAME");
        public final static Property SessionIcon = new Property(3, String.class, "sessionIcon", false, "SESSION_ICON");
        public final static Property Content = new Property(4, String.class, "content", false, "CONTENT");
        public final static Property CreateTime = new Property(5, Long.class, "createTime", false, "CREATE_TIME");
        public final static Property MsgDbId = new Property(6, Long.class, "msgDbId", false, "MSG_DB_ID");
        public final static Property MsgType = new Property(7, Integer.class, "msgType", false, "MSG_TYPE");
        public final static Property Uid = new Property(8, String.class, "uid", false, "UID");
        public final static Property UnreadMsgCount = new Property(9, int.class, "unreadMsgCount", false, "UNREAD_MSG_COUNT");
        public final static Property SendStatus = new Property(10, String.class, "sendStatus", false, "SEND_STATUS");
        public final static Property Draft = new Property(11, String.class, "draft", false, "DRAFT");
        public final static Property Priority = new Property(12, Integer.class, "priority", false, "PRIORITY");
        public final static Property Clan = new Property(13, String.class, "clan", false, "CLAN");
        public final static Property LocalId = new Property(14, Long.class, "localId", false, "LOCAL_ID");
    }

    private DaoSession daoSession;

    private final MessageTypeConverter msgTypeConverter = new MessageTypeConverter();
    private final StatusConverter sendStatusConverter = new StatusConverter();
    private final ClanConverter clanConverter = new ClanConverter();

    public SessionModelDao(DaoConfig config) {
        super(config);
    }
    
    public SessionModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SESSION_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SESSION_ID\" TEXT UNIQUE ," + // 1: sessionID
                "\"SESSION_NAME\" TEXT," + // 2: sessionName
                "\"SESSION_ICON\" TEXT," + // 3: sessionIcon
                "\"CONTENT\" TEXT," + // 4: content
                "\"CREATE_TIME\" INTEGER," + // 5: createTime
                "\"MSG_DB_ID\" INTEGER," + // 6: msgDbId
                "\"MSG_TYPE\" INTEGER," + // 7: msgType
                "\"UID\" TEXT," + // 8: uid
                "\"UNREAD_MSG_COUNT\" INTEGER NOT NULL ," + // 9: unreadMsgCount
                "\"SEND_STATUS\" TEXT," + // 10: sendStatus
                "\"DRAFT\" TEXT," + // 11: draft
                "\"PRIORITY\" INTEGER," + // 12: priority
                "\"CLAN\" TEXT," + // 13: clan
                "\"LOCAL_ID\" INTEGER);"); // 14: localId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SESSION_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SessionModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String sessionID = entity.getSessionID();
        if (sessionID != null) {
            stmt.bindString(2, sessionID);
        }
 
        String sessionName = entity.getSessionName();
        if (sessionName != null) {
            stmt.bindString(3, sessionName);
        }
 
        String sessionIcon = entity.getSessionIcon();
        if (sessionIcon != null) {
            stmt.bindString(4, sessionIcon);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(6, createTime);
        }
 
        Long msgDbId = entity.getMsgDbId();
        if (msgDbId != null) {
            stmt.bindLong(7, msgDbId);
        }
 
        MessageType msgType = entity.getMsgType();
        if (msgType != null) {
            stmt.bindLong(8, msgTypeConverter.convertToDatabaseValue(msgType));
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(9, uid);
        }
        stmt.bindLong(10, entity.getUnreadMsgCount());
 
        Status sendStatus = entity.getSendStatus();
        if (sendStatus != null) {
            stmt.bindString(11, sendStatusConverter.convertToDatabaseValue(sendStatus));
        }
 
        String draft = entity.getDraft();
        if (draft != null) {
            stmt.bindString(12, draft);
        }
 
        Integer priority = entity.getPriority();
        if (priority != null) {
            stmt.bindLong(13, priority);
        }
 
        ClanModel clan = entity.getClan();
        if (clan != null) {
            stmt.bindString(14, clanConverter.convertToDatabaseValue(clan));
        }
 
        Long localId = entity.getLocalId();
        if (localId != null) {
            stmt.bindLong(15, localId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SessionModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String sessionID = entity.getSessionID();
        if (sessionID != null) {
            stmt.bindString(2, sessionID);
        }
 
        String sessionName = entity.getSessionName();
        if (sessionName != null) {
            stmt.bindString(3, sessionName);
        }
 
        String sessionIcon = entity.getSessionIcon();
        if (sessionIcon != null) {
            stmt.bindString(4, sessionIcon);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(6, createTime);
        }
 
        Long msgDbId = entity.getMsgDbId();
        if (msgDbId != null) {
            stmt.bindLong(7, msgDbId);
        }
 
        MessageType msgType = entity.getMsgType();
        if (msgType != null) {
            stmt.bindLong(8, msgTypeConverter.convertToDatabaseValue(msgType));
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(9, uid);
        }
        stmt.bindLong(10, entity.getUnreadMsgCount());
 
        Status sendStatus = entity.getSendStatus();
        if (sendStatus != null) {
            stmt.bindString(11, sendStatusConverter.convertToDatabaseValue(sendStatus));
        }
 
        String draft = entity.getDraft();
        if (draft != null) {
            stmt.bindString(12, draft);
        }
 
        Integer priority = entity.getPriority();
        if (priority != null) {
            stmt.bindLong(13, priority);
        }
 
        ClanModel clan = entity.getClan();
        if (clan != null) {
            stmt.bindString(14, clanConverter.convertToDatabaseValue(clan));
        }
 
        Long localId = entity.getLocalId();
        if (localId != null) {
            stmt.bindLong(15, localId);
        }
    }

    @Override
    protected final void attachEntity(SessionModel entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SessionModel readEntity(Cursor cursor, int offset) {
        SessionModel entity = new SessionModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sessionID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sessionName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sessionIcon
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // content
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // createTime
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // msgDbId
            cursor.isNull(offset + 7) ? null : msgTypeConverter.convertToEntityProperty(cursor.getInt(offset + 7)), // msgType
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // uid
            cursor.getInt(offset + 9), // unreadMsgCount
            cursor.isNull(offset + 10) ? null : sendStatusConverter.convertToEntityProperty(cursor.getString(offset + 10)), // sendStatus
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // draft
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // priority
            cursor.isNull(offset + 13) ? null : clanConverter.convertToEntityProperty(cursor.getString(offset + 13)), // clan
            cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14) // localId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SessionModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSessionID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSessionName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSessionIcon(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreateTime(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setMsgDbId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setMsgType(cursor.isNull(offset + 7) ? null : msgTypeConverter.convertToEntityProperty(cursor.getInt(offset + 7)));
        entity.setUid(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUnreadMsgCount(cursor.getInt(offset + 9));
        entity.setSendStatus(cursor.isNull(offset + 10) ? null : sendStatusConverter.convertToEntityProperty(cursor.getString(offset + 10)));
        entity.setDraft(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPriority(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setClan(cursor.isNull(offset + 13) ? null : clanConverter.convertToEntityProperty(cursor.getString(offset + 13)));
        entity.setLocalId(cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SessionModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SessionModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SessionModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUserModelDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getMessageModelDao().getAllColumns());
            builder.append(" FROM SESSION_MODEL T");
            builder.append(" LEFT JOIN USER_MODEL T0 ON T.\"UID\"=T0.\"UID\"");
            builder.append(" LEFT JOIN MESSAGE_MODEL T1 ON T.\"MSG_DB_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected SessionModel loadCurrentDeep(Cursor cursor, boolean lock) {
        SessionModel entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        UserModel user = loadCurrentOther(daoSession.getUserModelDao(), cursor, offset);
        entity.setUser(user);
        offset += daoSession.getUserModelDao().getAllColumns().length;

        MessageModel sessionMsg = loadCurrentOther(daoSession.getMessageModelDao(), cursor, offset);
        entity.setSessionMsg(sessionMsg);

        return entity;    
    }

    public SessionModel loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<SessionModel> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<SessionModel> list = new ArrayList<SessionModel>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<SessionModel> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<SessionModel> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
