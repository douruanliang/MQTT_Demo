package io.dourl.mqtt.bean;

import com.google.gson.Gson;


import org.greenrobot.greendao.DaoException;
import org.greenrobot.greendao.annotation.Convert;
import org.greenrobot.greendao.annotation.Entity;
import org.greenrobot.greendao.annotation.Generated;
import org.greenrobot.greendao.annotation.Id;
import org.greenrobot.greendao.annotation.Keep;
import org.greenrobot.greendao.annotation.ToOne;
import org.greenrobot.greendao.annotation.Unique;
import org.greenrobot.greendao.converter.PropertyConverter;

import io.dourl.mqtt.base.BaseObject;
import io.dourl.mqtt.model.ClanModel;
import io.dourl.mqtt.model.message.chat.MessageType;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "TABLE_SESSION".
 */
@Entity
public class SessionModel implements BaseObject {

    @Id(autoincrement = true)
    protected Long id;

    @Unique
    protected String sessionID;
    protected String sessionName;
    protected String sessionIcon;
    protected String content;
    protected Long createTime;
    protected Long msgDbId;
    /**
     * 消息类型，普通消息，通知等等
     * 具体的消息类型，请关注body中的type
     */
    @Convert(converter = MessageModel.MessageTypeConverter.class, columnType = Integer.class)
    protected MessageType msgType;

    protected String uid;
    protected int unreadMsgCount;

    @Convert(converter = MessageModel.StatusConverter.class, columnType = String.class)
    protected MessageModel.Status sendStatus;

    protected String draft;

    protected Integer priority;

    /**
     * 群聊信息
     */
    @Convert(converter = ClanConverter.class, columnType = String.class)
    protected ClanModel clan;

    protected Long localId;
    @ToOne(joinProperty = "uid")
    protected UserModel user;

    @ToOne(joinProperty = "msgDbId")
    protected MessageModel sessionMsg;

    /** Used to resolve relations */
    @Generated(hash = 2040040024)
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated(hash = 93931440)
    private transient SessionModelDao myDao;


    @Generated(hash = 354459021)
    public SessionModel(Long id, String sessionID, String sessionName, String sessionIcon,
            String content, Long createTime, Long msgDbId, MessageType msgType, String uid,
            int unreadMsgCount, MessageModel.Status sendStatus, String draft,
            Integer priority, ClanModel clan, Long localId) {
        this.id = id;
        this.sessionID = sessionID;
        this.sessionName = sessionName;
        this.sessionIcon = sessionIcon;
        this.content = content;
        this.createTime = createTime;
        this.msgDbId = msgDbId;
        this.msgType = msgType;
        this.uid = uid;
        this.unreadMsgCount = unreadMsgCount;
        this.sendStatus = sendStatus;
        this.draft = draft;
        this.priority = priority;
        this.clan = clan;
        this.localId = localId;
    }

    @Generated(hash = 1381345516)
    public SessionModel() {
    }




    @Generated(hash = 1867105156)
    private transient String user__resolvedKey;

    @Generated(hash = 474787524)
    private transient Long sessionMsg__resolvedKey;


    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getSessionID() {
        return sessionID;
    }

    public void setSessionID(String sessionID) {
        this.sessionID = sessionID;
    }

    public String getSessionName() {
        return sessionName;
    }

    public void setSessionName(String sessionName) {
        this.sessionName = sessionName;
    }

    public String getSessionIcon() {
        return sessionIcon;
    }

    public void setSessionIcon(String sessionIcon) {
        this.sessionIcon = sessionIcon;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    public Long getCreateTime() {
        return createTime;
    }

    public void setCreateTime(Long createTime) {
        this.createTime = createTime;
    }

    public Long getMsgDbId() {
        return msgDbId;
    }

    public void setMsgDbId(Long msgDbId) {
        this.msgDbId = msgDbId;
    }

    public MessageType getMsgType() {
        return msgType;
    }

    public void setMsgType(MessageType msgType) {
        this.msgType = msgType;
    }

    public String getUid() {
        return uid;
    }

    public void setUid(String uid) {
        this.uid = uid;
    }

    public int getUnreadMsgCount() {
        return unreadMsgCount;
    }

    public void setUnreadMsgCount(Integer unreadMsgCount) {
        this.unreadMsgCount = unreadMsgCount;
    }

    public MessageModel.Status getSendStatus() {
        return sendStatus;
    }

    public void setSendStatus(MessageModel.Status sendStatus) {
        this.sendStatus = sendStatus;
    }

    public String getDraft() {
        return draft;
    }

    public void setDraft(String draft) {
        this.draft = draft;
    }

    public Long getLocalId() {
        return localId;
    }

    public void setLocalId(Long localId) {
        this.localId = localId;
    }

    public void addUnReadCount() {
        unreadMsgCount = unreadMsgCount + 1;
    }

    static class ClanConverter implements PropertyConverter<ClanModel, String> {

        @Override
        public ClanModel convertToEntityProperty(String databaseValue) {
            return ClanModel.buildClan(databaseValue);
        }

        @Override
        public String convertToDatabaseValue(ClanModel entityProperty) {

            return new Gson().toJson(entityProperty);
        }
    }








    public void setUnreadMsgCount(int unreadMsgCount) {
        this.unreadMsgCount = unreadMsgCount;
    }

    @Override
    public String toString() {
        return "SessionModel{" +
                "sessionMsg=" + sessionMsg +
                ", id=" + id +
                ", sessionID='" + sessionID + '\'' +
                ", sessionName='" + sessionName + '\'' +
                ", sessionIcon='" + sessionIcon + '\'' +
                ", content='" + content + '\'' +
                ", createTime=" + createTime +
                ", msgDbId=" + msgDbId +
                ", msgType=" + msgType +
                ", uid='" + uid + '\'' +
                ", unreadMsgCount=" + unreadMsgCount +
                ", sendStatus=" + sendStatus +
                ", draft='" + draft + '\'' +
                ", localId=" + localId +
                ", user=" + user +
                '}';
    }

    public ClanModel getClan() {
        /*if (this.clan == null) {
            this.clan = getSessionMsg().getClan();
        }*/
        return this.clan;
    }

    public void setClan(ClanModel clan) {
        this.clan = clan;
    }

    public Integer getPriority() {
        return this.priority;
    }

    public void setPriority(int priority) {
        this.priority = priority;
    }

    public void setPriority(Integer priority) {
        this.priority = priority;
    }




    @Override
    public boolean equals(Object obj) {
        return sessionID.equals(((SessionModel) obj).sessionID);
    }

    /** To-one relationship, resolved on first access. */
    @Generated(hash = 386367976)
    public UserModel getUser() {
        String __key = this.uid;
        if (user__resolvedKey == null || user__resolvedKey != __key) {
            final DaoSession daoSession = this.daoSession;
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserModelDao targetDao = daoSession.getUserModelDao();
            UserModel userNew = targetDao.load(__key);
            synchronized (this) {
                user = userNew;
                user__resolvedKey = __key;
            }
        }
        return user;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated(hash = 865374984)
    public void setUser(UserModel user) {
        synchronized (this) {
            this.user = user;
            uid = user == null ? null : user.getUid();
            user__resolvedKey = uid;
        }
    }

    /** To-one relationship, resolved on first access. */
    @Generated(hash = 1014715134)
    public MessageModel getSessionMsg() {
        Long __key = this.msgDbId;
        if (sessionMsg__resolvedKey == null || !sessionMsg__resolvedKey.equals(__key)) {
            final DaoSession daoSession = this.daoSession;
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MessageModelDao targetDao = daoSession.getMessageModelDao();
            MessageModel sessionMsgNew = targetDao.load(__key);
            synchronized (this) {
                sessionMsg = sessionMsgNew;
                sessionMsg__resolvedKey = __key;
            }
        }
        return sessionMsg;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated(hash = 1331023254)
    public void setSessionMsg(MessageModel sessionMsg) {
        synchronized (this) {
            this.sessionMsg = sessionMsg;
            msgDbId = sessionMsg == null ? null : sessionMsg.getId();
            sessionMsg__resolvedKey = msgDbId;
        }
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 128553479)
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 1942392019)
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 713229351)
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated(hash = 1560088805)
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSessionModelDao() : null;
    }
}
